using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;

namespace MOG_ControlsLibrary
{
	/// <summary>
	/// A TreeNode with asset information embedded
	/// </summary>
	public class AssetTreeNode : TreeNode
	{
		#region Member vars
		// Attributes of this node
		public bool InDiskTree = false;
		public bool InSelectedTree = false;
		public bool InAssetTree = false;

		public bool IsAFile = false;
		public bool IsAFolder = false;
		public bool IsAnAssetFilename = false;
		public bool IsAClassification = false;
		public bool IsAnAssetSubFoler = false;
		public bool AutoGenerated = false;
		public bool InDB = true;

		// Links to this node's brothers in the other tree views
		public AssetTreeNode MasterNode = null;
		public AssetTreeNode DiskNode = null;
		public AssetTreeNode SelectedNode = null;
		public AssetTreeNode AssetNode = null;

		public string FileFullPath = "<empty>";
		public string RelativePath = "<empty>";

		// Files associated with this asset
		public ArrayList fileNodes = new ArrayList();

		public bool WriteProtected = false;

		public AssetTreeNode AssetFilenameNode = null;
		#endregion
		#region Constructors
		public AssetTreeNode(string text) :base(text)
		{
		}

		public AssetTreeNode(string text, int imageIndex) :base(text, imageIndex, imageIndex)
		{
		}

		public AssetTreeNode(string text, int imageIndex, Color foreColor) :base(text, imageIndex, imageIndex)
		{
			this.ForeColor = foreColor;
		}
		#endregion
		#region Public functions

		public override string ToString()
		{
			return "Text = " + this.Text;
		}

		public void SetRed()
		{
			// Can't change colors while selected or it'll screw up the selection highlight colors and whatnot
			if (this.TreeView != null  &&  this.TreeView is CodersLab.Windows.Controls.TreeView  && ((CodersLab.Windows.Controls.TreeView)this.TreeView).SelectedNodes.Contains(this))
			{
				((CodersLab.Windows.Controls.TreeView)this.TreeView).SelectedNodes.Remove(this);
				this.ForeColor = Color.Red;
				((CodersLab.Windows.Controls.TreeView)this.TreeView).SelectedNodes.Add(this);
			}
			else
				this.ForeColor = Color.Red;
		}

		public void SetGreen()
		{
			// Can't change colors while selected or it'll screw up the selection highlight colors and whatnot
			if (this.TreeView != null  &&  this.TreeView is CodersLab.Windows.Controls.TreeView  && ((CodersLab.Windows.Controls.TreeView)this.TreeView).SelectedNodes.Contains(this))
			{
				((CodersLab.Windows.Controls.TreeView)this.TreeView).SelectedNodes.Remove(this);
				this.ForeColor = Color.Green;
				((CodersLab.Windows.Controls.TreeView)this.TreeView).SelectedNodes.Add(this);
			}
			else
				this.ForeColor = Color.Green;
		}

		public void SetSelectedNode_Recursive(AssetTreeNode val)
		{
			this.SelectedNode = val;

			foreach (AssetTreeNode subNode in this.Nodes)
				subNode.SetSelectedNode_Recursive(val);
		}

		public new void Remove()
		{
			CodersLab.Windows.Controls.TreeView tree = this.TreeView as CodersLab.Windows.Controls.TreeView;
			if (tree != null)
				tree.RemoveNodeNotify(this);
			
			base.Remove();
		}

		private bool IsInParentLine(AssetTreeNode test)
		{
			AssetTreeNode node = this;

			while (node != null)
			{
				if (test == node)
					return true;

				node = node.Parent as AssetTreeNode;
			}

			return false;
		}

		private AssetTreeNode FindAncestor(ArrayList nodes)
		{
			foreach (AssetTreeNode node in nodes)
			{
				if (IsInParentLine(node))
					return node;
			}

			return null;
		}

		private ArrayList GetNonDescendants(ArrayList nodes)
		{
			ArrayList nons = new ArrayList();

			//Make a new list and only put nodes in it that are not descended from me
			foreach (AssetTreeNode node in nodes)
			{
				if (!node.IsInParentLine(this))
				{
					//I am not in the parent line for this node, so add it
					nons.Add(node);
				}
			}

			return nons;
		}

		public static ArrayList GetUniqueRootNodes(ArrayList nodes)
		{
			ArrayList roots = new ArrayList();

			foreach (AssetTreeNode node in nodes)
			{
				AssetTreeNode ancestor = node.FindAncestor(roots);
				if (ancestor == null)
				{
					//There is no ancestor in the list for this node
					//We're going to add it, so that means we don't need any nodes that might be underneath this one in the tree
					roots = node.GetNonDescendants(roots);
					
					//Now add it
					roots.Add(node);
				}
			}

			return roots;
		}

		#endregion
	}
}



